@startuml
' Define abstract classes
abstract class Sensor extends Subject{
    - value : int
    - type : string
    + Sensor(val : int, type : string)
    + {abstract} get_value() : int
    + {abstract} update_value(new_value : int)
    + {abstract} get_type() : string
    + {abstract} is_functional() : bool
    + {abstract} in_optimal_range() : bool
}

class RadarSensor extends Sensor {
    + RadarSensor(val : int, type : string)
    + update_value(new_value : int)
    + get_value() : int
    + get_type() : string
    + is_functional() : bool
    + in_optimal_range() : bool
}

class Battery extends Sensor {
    - temp_ : int
    + Battery(val : int, type : string, temp : int)
    + get_value() : int
    + update_value(new_value : int)
    + get_temperature() : int
    + get_type() : string
    + is_charged() : bool
    + is_functional() : bool
    + in_optimal_range() : bool
}

class SpeedSensor extends Sensor {
    + SpeedSensor(val : int, type : string)
    + get_value() : int
    + set_value(new_value : int) : int
    + update_value(new_value : int)
    + get_type() : string
    + is_functional() : bool
    + in_optimal_range() : bool
}

class TemperatureSensor extends Sensor {
    + TemperatureSensor(val : int, type : string)
    + get_value() : int
    + update_value(new_value : int)
    + get_type() : string
    + is_functional() : bool
    + in_optimal_range() : bool
}

abstract class Observer {
    + {abstract} update(message : string)
    + {abstract} update(message : string, level : LogLevel)
}

class Diagnostics extends Observer {
    - curr_status : map<string, string>
    + getInstance() : Diagnostics
    + update(message : string)
    + update(message : string, level : LogLevel)
    + status()
}

class AdaptiveCruiseControl extends Observer {
    - speed : SpeedSensor
    - radar : RadarSensor
    + AdaptiveCruiseControl(speed : SpeedSensor, radar : RadarSensor)
    + update(message : string)
    + update(message : string, level : LogLevel)
    + adjustSpeed()
}

class Subject {
    - observers : vector<Observer*>
    + attach(observer : Observer*)
    + notifyObservers(message : string)
    + notifyObservers(message : string, level : LogLevel)
}

' Enum for log levels
enum LogLevel {
    ERROR,
    WARNING,
    INFO
}

' Logger class
class Logger {
    + get_instance() : Logger
    + log(message : string, level : LogLevel)
}
class Vehicle {
    - sensors : vector<shared_ptr<Sensor>>
    - acc : shared_ptr<AdaptiveCruiseControl>
    + Vehicle()
    + update_sensors()
    + display_dashboard()
    + start_diagnostics()
    + start_ACC()
    + ~Vehicle()
}

' Define relationships
Vehicle "1" *-- "many" Sensor 
Vehicle "1" *-- "1" AdaptiveCruiseControl 
Vehicle "1" *-- "1" Diagnostics 
' Association between Logger and LogLevel
Logger ..> LogLevel 

' Logger usage
Sensor ..> Logger 
Diagnostics ..> Logger 
AdaptiveCruiseControl ..> Logger 
Subject "1" *-- "0..*" Observer 
@enduml